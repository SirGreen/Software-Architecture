DROP TABLE IF EXISTS SoftwareArchitecture.Patient;
DROP TABLE IF EXISTS SoftwareArchitecture.PatientVisit;
DROP TABLE IF EXISTS SoftwareArchitecture.MedicalHistory;
GO

CREATE TABLE SoftwareArchitecture.Patient
(
  Id INT PRIMARY KEY,
  HealthInsuranceId NVARCHAR(255),
  CreatedDate DATETIME DEFAULT GETDATE(),
  ModifiedDate DATETIME DEFAULT GETDATE(),
  FOREIGN KEY (Id) REFERENCES SoftwareArchitecture.Person(Id)
);
GO

CREATE TABLE SoftwareArchitecture.PatientVisit
(
  Id INT IDENTITY(1,1) PRIMARY KEY,
  PatientId INT,
  VisitDate DATETIME NOT NULL DEFAULT GETDATE(),
  Notes NVARCHAR(MAX),
  FOREIGN KEY (PatientId) REFERENCES SoftwareArchitecture.Patient(Id)
  ON DELETE SET NULL
);
GO

CREATE TABLE SoftwareArchitecture.MedicalHistory
(
  Id INT IDENTITY(1,1) PRIMARY KEY,
  PatientVisitId INT NULL,
  DoctorId INT NULL,
  Department NVARCHAR(255) NOT NULL,
  ReasonForVisit NVARCHAR(MAX),
  Diagnosis NVARCHAR(MAX),
  Treatment NVARCHAR(MAX),
  PrescribedMedication NVARCHAR(MAX),
  CreatedDate DATETIME DEFAULT GETDATE(),
  ModifiedDate DATETIME DEFAULT GETDATE(),
  FOREIGN KEY (PatientVisitId) REFERENCES SoftwareArchitecture.PatientVisit(Id)
    ON DELETE SET NULL,
  FOREIGN KEY (DoctorId) REFERENCES SoftwareArchitecture.Employee(Id)
    ON DELETE SET NULL
);
GO

-- Procedure add patient
DROP PROCEDURE IF EXISTS SoftwareArchitecture.AddPatient
GO
CREATE PROCEDURE SoftwareArchitecture.AddPatient
  @Name NVARCHAR(MAX),
  @Gender BIT,
  @PhoneNumber NVARCHAR(MAX),
  @Address NVARCHAR(MAX),
  @DateOfBirth DATE,
  @Email NVARCHAR(MAX),
  @HealthInsuranceId NVARCHAR(255),
  @NewPatientId INT OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

  DECLARE @NewPersonId INT;

  -- Add person
  EXEC SoftwareArchitecture.AddPerson
        @Name = @Name,
        @Gender = @Gender,
        @PhoneNumber = @PhoneNumber,
        @Address = @Address,
        @DateOfBirth = @DateOfBirth,
        @Email = @Email,
        @NewPersonId = @NewPersonId OUTPUT;

  -- Add patient
  INSERT INTO SoftwareArchitecture.Patient
    (Id, HealthInsuranceId)
  VALUES
    (@NewPersonId, @HealthInsuranceId);

  SET @NewPatientId = @NewPersonId

END;
GO

-- Procedure add Patient Visit
DROP PROCEDURE IF EXISTS SoftwareArchitecture.AddPatientVisit
GO
CREATE PROCEDURE SoftwareArchitecture.AddPatientVisit
  @PatientId INT,
  @VisitDate DATETIME,
  @Notes NVARCHAR(MAX),
  @NewVisitId INT OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

  -- Add patient visit
  INSERT INTO SoftwareArchitecture.PatientVisit
    (PatientId, VisitDate, Notes)
  VALUES
    (@PatientId, @VisitDate, @Notes);

  -- Get the newly created Visit ID
  SET @NewVisitId = SCOPE_IDENTITY();

END;
GO

-- Procedure add medical history
DROP PROCEDURE IF EXISTS SoftwareArchitecture.AddMedicalHistory
GO
CREATE PROCEDURE SoftwareArchitecture.AddMedicalHistory
  @PatientVisitId INT,
  @DoctorId INT,
  @Department NVARCHAR(100),
  @ReasonForVisit NVARCHAR(255),
  @Diagnosis NVARCHAR(MAX),
  @Treatment NVARCHAR(MAX),
  @PrescribedMedication NVARCHAR(MAX),
  @NewMedicalHistoryId INT OUTPUT
AS
BEGIN
  SET NOCOUNT ON;

  -- Add medical history
  INSERT INTO SoftwareArchitecture.MedicalHistory
    (PatientVisitId, DoctorId, Department, ReasonForVisit, Diagnosis, Treatment, PrescribedMedication)
  VALUES
    (@PatientVisitId, @DoctorId, @Department, @ReasonForVisit, @Diagnosis, @Treatment, @PrescribedMedication);

  -- Get the newly created Medical History ID
  SET @NewMedicalHistoryId = SCOPE_IDENTITY();

END;
GO

-- Procedure get all patients
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetAllPatients
GO
CREATE PROCEDURE SoftwareArchitecture.GetAllPatients
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    p.Id AS PatientId,
    p.HealthInsuranceId,
    p.CreatedDate,
    p.ModifiedDate,
    per.Name,
    per.Gender,
    per.PhoneNumber,
    per.Address,
    per.DateOfBirth,
    per.Email
  FROM
    SoftwareArchitecture.Patient p
    INNER JOIN
    SoftwareArchitecture.Person per ON p.Id = per.Id;
END;
GO

-- Procedure get patient by Id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetPatientById
GO
CREATE PROCEDURE SoftwareArchitecture.GetPatientById
  @PatientId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    p.Id,
    p.HealthInsuranceId,
    p.CreatedDate,
    p.ModifiedDate,
    per.Name,
    per.Gender,
    per.PhoneNumber,
    per.Address,
    per.DateOfBirth,
    per.Email
  FROM
    SoftwareArchitecture.Patient p
    INNER JOIN
    SoftwareArchitecture.Person per ON p.Id = per.Id
  WHERE
    p.Id = @PatientId;
END;
GO

-- Procedure get patient by Email
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetPatientByEmail
GO
CREATE PROCEDURE SoftwareArchitecture.GetPatientByEmail
  @Email NVARCHAR(MAX)
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    p.Id,
    p.HealthInsuranceId,
    p.CreatedDate,
    p.ModifiedDate,
    per.Name,
    per.Gender,
    per.PhoneNumber,
    per.Address,
    per.DateOfBirth,
    per.Email
  FROM
    SoftwareArchitecture.Patient p
    INNER JOIN
    SoftwareArchitecture.Person per ON p.Id = per.Id
  WHERE
    per.Email = @Email;
END;
GO

-- Procedure get all patient visits
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetAllPatientVisits
GO
CREATE PROCEDURE SoftwareArchitecture.GetAllPatientVisits
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    pv.Id,
    pv.PatientId,
    pv.VisitDate,
    pv.Notes
  FROM
    SoftwareArchitecture.PatientVisit pv
END;
GO

-- Procedure get patient visit by id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetPatientVisitById
GO
CREATE PROCEDURE SoftwareArchitecture.GetPatientVisitById
  @VisitId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    pv.Id AS VisitId,
    pv.PatientId,
    pv.VisitDate,
    pv.Notes
  FROM
    SoftwareArchitecture.PatientVisit pv
  WHERE
    pv.Id = @VisitId;
END;
GO

-- Procedure get patient visits by patient id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetPatientVisitsByPatientId
GO
CREATE PROCEDURE SoftwareArchitecture.GetPatientVisitsByPatientId
  @PatientId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    pv.Id AS VisitId,
    pv.PatientId,
    pv.VisitDate,
    pv.Notes
  FROM
    SoftwareArchitecture.PatientVisit pv
  WHERE
    pv.PatientId = @PatientId;
END;
GO

-- Procedure get all medical history
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetAllMedicalHistory
GO
CREATE PROCEDURE SoftwareArchitecture.GetAllMedicalHistory
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    mh.Id AS MedicalHistoryId,
    mh.PatientVisitId,
    mh.DoctorId,
    mh.Department,
    mh.ReasonForVisit,
    mh.Diagnosis,
    mh.Treatment,
    mh.PrescribedMedication,
    mh.CreatedDate,
    mh.ModifiedDate
  FROM
    SoftwareArchitecture.MedicalHistory mh
-- join person to get doctor
END;
GO

-- Procedure get medical histories by id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetMedicalHistoryById
GO
CREATE PROCEDURE SoftwareArchitecture.GetMedicalHistoryById
  @MedicalHistoryId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    mh.Id AS MedicalHistoryId,
    mh.PatientVisitId,
    mh.DoctorId,
    mh.Department,
    mh.ReasonForVisit,
    mh.Diagnosis,
    mh.Treatment,
    mh.PrescribedMedication,
    mh.CreatedDate,
    mh.ModifiedDate
  FROM
    SoftwareArchitecture.MedicalHistory mh
  WHERE
    mh.Id = @MedicalHistoryId;
END;
GO

-- Procedure get medical history by patient id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetMedicalHistoryByPatientId
GO
CREATE PROCEDURE SoftwareArchitecture.GetMedicalHistoryByPatientId
  @PatientId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    mh.Id AS MedicalHistoryId,
    mh.PatientVisitId,
    mh.DoctorId,
    mh.Department,
    mh.ReasonForVisit,
    mh.Diagnosis,
    mh.Treatment,
    mh.PrescribedMedication,
    mh.CreatedDate,
    mh.ModifiedDate
  FROM
    SoftwareArchitecture.MedicalHistory mh
    LEFT JOIN
    SoftwareArchitecture.PatientVisit pv ON mh.PatientVisitId = pv.Id
    LEFT JOIN
    SoftwareArchitecture.Patient p ON pv.PatientId = p.Id
  -- join person to get doctor
  WHERE
    pv.PatientId = @PatientId;
END;
GO

-- Procedure get medical histories by patient visit id
DROP PROCEDURE IF EXISTS SoftwareArchitecture.GetMedicalHistoryByPatientVisitId
GO
CREATE PROCEDURE SoftwareArchitecture.GetMedicalHistoryByPatientVisitId
  @PatientVisitId INT
AS
BEGIN
  SET NOCOUNT ON;

  SELECT
    mh.Id AS MedicalHistoryId,
    mh.PatientVisitId,
    mh.DoctorId,
    mh.Department,
    mh.ReasonForVisit,
    mh.Diagnosis,
    mh.Treatment,
    mh.PrescribedMedication,
    mh.CreatedDate,
    mh.ModifiedDate,
    pv.PatientId,
    p.HealthInsuranceId,
    per.Name AS PatientName,
    per.Gender,
    per.PhoneNumber,
    per.Address,
    per.DateOfBirth,
    per.Email,
    doc.Name AS DoctorName
  FROM
    SoftwareArchitecture.MedicalHistory mh
    LEFT JOIN
    SoftwareArchitecture.PatientVisit pv ON mh.PatientVisitId = pv.Id
    LEFT JOIN
    SoftwareArchitecture.Patient p ON pv.PatientId = p.Id
    LEFT JOIN
    SoftwareArchitecture.Person per ON p.Id = per.Id -- join person to get patient
    LEFT JOIN
    SoftwareArchitecture.Employee e ON mh.DoctorId = e.Id
    LEFT JOIN
    SoftwareArchitecture.Person doc ON e.Id = doc.Id
  -- join person to get doctor
  WHERE
    mh.PatientVisitId = @PatientVisitId;
END;
GO

-- Procedure edit patient
DROP PROCEDURE IF EXISTS SoftwareArchitecture.EditPatient
GO
CREATE PROCEDURE SoftwareArchitecture.EditPatient
  @PatientId INT,
  @Name NVARCHAR(MAX),
  @Gender BIT,
  @PhoneNumber NVARCHAR(MAX),
  @Address NVARCHAR(MAX),
  @DateOfBirth DATE,
  @Email NVARCHAR(MAX),
  @HealthInsuranceId NVARCHAR(255)
AS
BEGIN
  SET NOCOUNT ON;

  -- Update person details
  UPDATE SoftwareArchitecture.Person
  SET
    Name = @Name,
    Gender = @Gender,
    PhoneNumber = @PhoneNumber,
    Address = @Address,
    DateOfBirth = @DateOfBirth,
    Email = @Email
  WHERE
    Id = @PatientId;

  -- Update patient details
  UPDATE SoftwareArchitecture.Patient
  SET
    HealthInsuranceId = @HealthInsuranceId,
    ModifiedDate = GETDATE()
  WHERE
    Id = @PatientId;
END;
GO

-- Procedure edit patient visit
DROP PROCEDURE IF EXISTS SoftwareArchitecture.EditPatientVisit
GO
CREATE PROCEDURE SoftwareArchitecture.EditPatientVisit
  @VisitId INT,
  @PatientId INT,
  @VisitDate DATETIME,
  @Notes NVARCHAR(MAX)
AS
BEGIN
  SET NOCOUNT ON;

  UPDATE SoftwareArchitecture.PatientVisit
  SET
    PatientId = @PatientId,
    VisitDate = @VisitDate,
    Notes = @Notes
  WHERE
    Id = @VisitId;
END;
GO

-- Procedure edit medical history
DROP PROCEDURE IF EXISTS SoftwareArchitecture.EditMedicalHistory
GO
CREATE PROCEDURE SoftwareArchitecture.EditMedicalHistory
  @MedicalHistoryId INT,
  @PatientVisitId INT,
  @DoctorId INT,
  @Department NVARCHAR(255),
  @ReasonForVisit NVARCHAR(MAX),
  @Diagnosis NVARCHAR(MAX),
  @Treatment NVARCHAR(MAX),
  @PrescribedMedication NVARCHAR(MAX)
AS
BEGIN
  SET NOCOUNT ON;

  UPDATE SoftwareArchitecture.MedicalHistory
  SET
    PatientVisitId = @PatientVisitId,
    DoctorId = @DoctorId,
    Department = @Department,
    ReasonForVisit = @ReasonForVisit,
    Diagnosis = @Diagnosis,
    Treatment = @Treatment,
    PrescribedMedication = @PrescribedMedication,
    ModifiedDate = GETDATE()
  WHERE
    Id = @MedicalHistoryId;
END;
GO

-- Procedure delete patient
DROP PROCEDURE IF EXISTS SoftwareArchitecture.DeletePatient
GO
CREATE PROCEDURE SoftwareArchitecture.DeletePatient
  @PatientId INT
AS
BEGIN
  SET NOCOUNT ON;

  -- Delete the patient record
  DELETE FROM SoftwareArchitecture.Patient
  WHERE Id = @PatientId;

  -- Delete the person record
  DELETE FROM SoftwareArchitecture.Person
  WHERE Id = @PatientId;
END;
GO

-- Procedure delete patient visit
DROP PROCEDURE IF EXISTS SoftwareArchitecture.DeletePatientVisit
GO
CREATE PROCEDURE SoftwareArchitecture.DeletePatientVisit
  @VisitId INT
AS
BEGIN
  SET NOCOUNT ON;

  -- Delete the patient visit record
  DELETE FROM SoftwareArchitecture.PatientVisit
  WHERE Id = @VisitId;
END;
GO

-- Procedure delete medical history
DROP PROCEDURE IF EXISTS SoftwareArchitecture.DeleteMedicalHistory
GO
CREATE PROCEDURE SoftwareArchitecture.DeleteMedicalHistory
  @MedicalHistoryId INT
AS
BEGIN
  SET NOCOUNT ON;

  -- Delete the medical history record
  DELETE FROM SoftwareArchitecture.MedicalHistory
  WHERE Id = @MedicalHistoryId;
END;
GO

-- Insert mock data into Patient table
DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'John Doe',
  @Gender = 1,
  @PhoneNumber = '123456789',
  @Address = '123 Main St',
  @DateOfBirth = '1980-01-01',
  @Email = 'johndoe@example.com',
  @HealthInsuranceId = 'HI12345',
  @NewPatientId = @NewPatientId OUTPUT;

-- SELECT @NewPatientId AS NewPatientId;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Jane Smith',
  @Gender = 0,
  @PhoneNumber = '987654321',
  @Address = '456 Elm St',
  @DateOfBirth = '1990-05-15',
  @Email = 'janesmith@example.com',
  @HealthInsuranceId = 'HI67890',
  @NewPatientId = @NewPatientId OUTPUT;
SELECT @NewPatientId AS NewPatientId;

-- Add 10 more patients
DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Robert Johnson',
  @Gender = 1,
  @PhoneNumber = '555-123-4567',
  @Address = '789 Oak Avenue',
  @DateOfBirth = '1975-08-22',
  @Email = 'robert.johnson@example.com',
  @HealthInsuranceId = 'HI24680',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Emily Parker',
  @Gender = 0,
  @PhoneNumber = '555-987-6543',
  @Address = '321 Pine Road',
  @DateOfBirth = '1988-11-30',
  @Email = 'emily.parker@example.com',
  @HealthInsuranceId = 'HI13579',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Michael Davis',
  @Gender = 1,
  @PhoneNumber = '555-246-8135',
  @Address = '567 Maple Street',
  @DateOfBirth = '1965-04-12',
  @Email = 'michael.davis@example.com',
  @HealthInsuranceId = 'HI97531',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Sarah Thompson',
  @Gender = 0,
  @PhoneNumber = '555-369-8521',
  @Address = '890 Cedar Lane',
  @DateOfBirth = '1992-02-28',
  @Email = 'sarah.thompson@example.com',
  @HealthInsuranceId = 'HI86420',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'David Wilson',
  @Gender = 1,
  @PhoneNumber = '555-159-7532',
  @Address = '432 Birch Boulevard',
  @DateOfBirth = '1983-07-19',
  @Email = 'david.wilson@example.com',
  @HealthInsuranceId = 'HI24689',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Jennifer Adams',
  @Gender = 0,
  @PhoneNumber = '555-753-9514',
  @Address = '678 Willow Court',
  @DateOfBirth = '1979-10-05',
  @Email = 'jennifer.adams@example.com',
  @HealthInsuranceId = 'HI13572',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'James Anderson',
  @Gender = 1,
  @PhoneNumber = '555-852-7413',
  @Address = '901 Spruce Drive',
  @DateOfBirth = '1970-12-15',
  @Email = 'james.anderson@example.com',
  @HealthInsuranceId = 'HI97532',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Lisa Martinez',
  @Gender = 0,
  @PhoneNumber = '555-741-9632',
  @Address = '543 Ash Place',
  @DateOfBirth = '1995-06-08',
  @Email = 'lisa.martinez@example.com',
  @HealthInsuranceId = 'HI86421',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Thomas Brown',
  @Gender = 1,
  @PhoneNumber = '555-963-8520',
  @Address = '876 Redwood Road',
  @DateOfBirth = '1968-03-24',
  @Email = 'thomas.brown@example.com',
  @HealthInsuranceId = 'HI24688',
  @NewPatientId = @NewPatientId OUTPUT;

DECLARE @NewPatientId INT;
EXEC SoftwareArchitecture.AddPatient 
  @Name = 'Amanda Walker',
  @Gender = 0,
  @PhoneNumber = '555-258-7496',
  @Address = '234 Sequoia Avenue',
  @DateOfBirth = '1986-09-17',
  @Email = 'amanda.walker@example.com',
  @HealthInsuranceId = 'HI13571',
  @NewPatientId = @NewPatientId OUTPUT;

-- Insert mock data into PatientVisit table

-- Visits for Jane Smith (Patient ID 9)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 9,
  @VisitDate = '2023-01-05',
  @Notes = 'Annual physical examination',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 9,
  @VisitDate = '2023-03-20',
  @Notes = 'Flu symptoms',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Robert Johnson (Patient ID 10)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 15,
  @VisitDate = '2023-02-10',
  @Notes = 'Chest pain evaluation',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 15,
  @VisitDate = '2023-04-05',
  @Notes = 'Cardiac follow-up',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Emily Parker (Patient ID 11)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 19,
  @VisitDate = '2023-01-15',
  @Notes = 'Allergic reaction',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 19,
  @VisitDate = '2023-03-30',
  @Notes = 'Allergy medication review',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Michael Davis (Patient ID 12)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 20,
  @VisitDate = '2023-02-20',
  @Notes = 'Joint pain consultation',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 20,
  @VisitDate = '2023-05-10',
  @Notes = 'Arthritis treatment follow-up',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Sarah Thompson (Patient ID 13)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 21,
  @VisitDate = '2023-02-05',
  @Notes = 'Prenatal checkup',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 21,
  @VisitDate = '2023-03-05',
  @Notes = 'Second trimester checkup',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for David Wilson (Patient ID 14)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 22,
  @VisitDate = '2023-01-25',
  @Notes = 'Diabetes screening',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 22,
  @VisitDate = '2023-04-25',
  @Notes = 'Glucose monitoring review',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Jennifer Adams (Patient ID 15)
DECLARE @NewVisitId INT;
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 23,
  @VisitDate = '2023-02-12',
  @Notes = 'Migraine consultation',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 23,
  @VisitDate = '2023-04-15',
  @Notes = 'Headache treatment follow-up',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for James Anderson (Patient ID 16)
DECLARE @NewVisitId INT;
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 24,
  @VisitDate = '2023-03-10',
  @Notes = 'Back pain evaluation',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 24,
  @VisitDate = '2023-05-20',
  @Notes = 'Physical therapy follow-up',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Lisa Martinez (Patient ID 17)
DECLARE @NewVisitId INT;
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 25,
  @VisitDate = '2023-01-30',
  @Notes = 'Annual wellness visit',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 25,
  @VisitDate = '2023-06-01',
  @Notes = 'Skin rash consultation',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Thomas Brown (Patient ID 18)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 18,
  @VisitDate = '2023-02-28',
  @Notes = 'Hypertension screening',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 18,
  @VisitDate = '2023-05-30',
  @Notes = 'Blood pressure follow-up',
  @NewVisitId = @NewVisitId OUTPUT;

-- Visits for Amanda Walker (Patient ID 19)
EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 19,
  @VisitDate = '2023-03-15',
  @Notes = 'Thyroid function test',
  @NewVisitId = @NewVisitId OUTPUT;

EXEC SoftwareArchitecture.AddPatientVisit 
  @PatientId = 19,
  @VisitDate = '2023-06-15',
  @Notes = 'Hormone therapy consultation',
  @NewVisitId = @NewVisitId OUTPUT;

-- Insert mock data into MedicalHistory table
DECLARE @NewMedicalHistoryId INT;
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 3,
  @DoctorId = 1,
  @Department = 'Cardiology',
  @ReasonForVisit = 'Chest pain',
  @Diagnosis = 'Mild arrhythmia',
  @Treatment = 'Medication prescribed',
  @PrescribedMedication = 'Beta blockers',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 4,
  @DoctorId = 1,
  @Department = 'Dermatology',
  @ReasonForVisit = 'Skin rash',
  @Diagnosis = 'Allergic reaction',
  @Treatment = 'Topical cream',
  @PrescribedMedication = 'Hydrocortisone cream',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Insert mock data into MedicalHistory table

-- Using Doctor ID 1 (existing)
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 12,
  @DoctorId = 1,
  @Department = 'Cardiology',
  @ReasonForVisit = 'Chest pain and shortness of breath',
  @Diagnosis = 'Moderate hypertension',
  @Treatment = 'Prescribed ACE inhibitors and lifestyle changes',
  @PrescribedMedication = 'Lisinopril 10mg daily',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 13,
  @DoctorId = 1,
  @Department = 'Cardiology',
  @ReasonForVisit = 'Follow-up for hypertension',
  @Diagnosis = 'Improving hypertension, responding to medication',
  @Treatment = 'Continue current medication with reduced sodium diet',
  @PrescribedMedication = 'Lisinopril 10mg daily, continue for 3 months',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Using Doctor ID 4 (existing)
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 15,
  @DoctorId = 4,
  @Department = 'Dermatology',
  @ReasonForVisit = 'Skin rash on arms and neck',
  @Diagnosis = 'Contact dermatitis',
  @Treatment = 'Avoid allergens, apply topical treatment',
  @PrescribedMedication = 'Hydrocortisone 1% cream twice daily for 7 days',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Using Doctor ID 34 (Dr. Robert Williams - Emergency)
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 26,
  @DoctorId = 34,
  @Department = 'Emergency',
  @ReasonForVisit = 'Severe abdominal pain',
  @Diagnosis = 'Acute appendicitis',
  @Treatment = 'Emergency appendectomy',
  @PrescribedMedication = 'Post-operative antibiotics and pain management',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 27,
  @DoctorId = 34,
  @Department = 'Emergency',
  @ReasonForVisit = 'High fever and severe headache',
  @Diagnosis = 'Viral meningitis',
  @Treatment = 'IV fluids, antipyretics, and monitoring',
  @PrescribedMedication = 'Acetaminophen for fever, IV fluids',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Using Doctor ID 35 (Dr. Sarah Johnson - Neurology)
DECLARE @NewMedicalHistoryId INT;
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 34,
  @DoctorId = 35,
  @Department = 'Neurology',
  @ReasonForVisit = 'Recurring migraines',
  @Diagnosis = 'Chronic migraine with aura',
  @Treatment = 'Preventive medication and lifestyle modifications',
  @PrescribedMedication = 'Propranolol 40mg daily, Sumatriptan for acute attacks',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 35,
  @DoctorId = 35,
  @Department = 'Neurology',
  @ReasonForVisit = 'Numbness and tingling in extremities',
  @Diagnosis = 'Peripheral neuropathy',
  @Treatment = 'Blood sugar control and medication for nerve pain',
  @PrescribedMedication = 'Gabapentin 300mg three times daily',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Using Doctor ID 36 (Dr. Michael Chen - Pediatric)
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 39,
  @DoctorId = 36,
  @Department = 'Pediatric',
  @ReasonForVisit = 'Recurrent ear infections',
  @Diagnosis = 'Chronic otitis media',
  @Treatment = 'Antibiotics and consideration for ear tubes if continues',
  @PrescribedMedication = 'Amoxicillin 400mg twice daily for 10 days',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 51,
  @DoctorId = 36,
  @Department = 'Pediatric',
  @ReasonForVisit = 'Persistent cough and wheezing',
  @Diagnosis = 'Childhood asthma',
  @Treatment = 'Inhaler therapy and environmental control',
  @PrescribedMedication = 'Albuterol inhaler as needed, Fluticasone inhaler daily',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Using Doctor ID 37 (Dr. Emily Rodriguez - Radiology)
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 52,
  @DoctorId = 37,
  @Department = 'Radiology',
  @ReasonForVisit = 'Follow-up on lung nodule',
  @Diagnosis = 'Benign pulmonary nodule, stable',
  @Treatment = 'Continued monitoring with annual chest CT',
  @PrescribedMedication = 'None required',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 63,
  @DoctorId = 37,
  @Department = 'Radiology',
  @ReasonForVisit = 'Screening mammogram',
  @Diagnosis = 'BIRADS 2 - benign finding',
  @Treatment = 'Routine screening mammogram in 1 year',
  @PrescribedMedication = 'None required',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Additional records to use remaining patient visit IDs
EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 64,
  @DoctorId = 34,
  @Department = 'Emergency',
  @ReasonForVisit = 'Broken wrist from fall',
  @Diagnosis = 'Distal radius fracture',
  @Treatment = 'Closed reduction and casting',
  @PrescribedMedication = 'Ibuprofen 600mg every 6 hours for pain',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 65,
  @DoctorId = 35,
  @Department = 'Neurology',
  @ReasonForVisit = 'Memory loss and confusion',
  @Diagnosis = 'Early-stage dementia',
  @Treatment = 'Cognitive medication and memory exercises',
  @PrescribedMedication = 'Donepezil 5mg daily',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

EXEC SoftwareArchitecture.AddMedicalHistory 
  @PatientVisitId = 66,
  @DoctorId = 36,
  @Department = 'Pediatric',
  @ReasonForVisit = 'Annual wellness checkup',
  @Diagnosis = 'Healthy child, normal development',
  @Treatment = 'Age-appropriate vaccinations',
  @PrescribedMedication = 'Vitamin D supplements',
  @NewMedicalHistoryId = @NewMedicalHistoryId OUTPUT;

-- Mock execution to update patient
EXEC SoftwareArchitecture.EditPatient
  @PatientId = 8,
  @Name = 'Johnathan Doe',
  @Gender = 1,
  @PhoneNumber = '1234567890',
  @Address = '123 Updated Main St',
  @DateOfBirth = '1980-01-01',
  @Email = 'johnathan.doe@example.com',
  @HealthInsuranceId = 'HI12345-UPDATED';

-- Mock execution to update medical history
EXEC SoftwareArchitecture.EditMedicalHistory
  @MedicalHistoryId = 1,
  @PatientVisitId = 3,
  @DoctorId = 2,
  @Department = 'Updated Cardiology',
  @ReasonForVisit = 'Updated chest pain reason',
  @Diagnosis = 'Updated mild arrhythmia diagnosis',
  @Treatment = 'Updated medication prescribed',
  @PrescribedMedication = 'Updated beta blockers';

-- Mock execution to delete patient
EXEC SoftwareArchitecture.DeletePatient
  @PatientId = 8;

-- Mock execution to delete patient visit
EXEC SoftwareArchitecture.DeletePatientVisit
  @VisitId = 3;

-- Mock execution to delete medical history
EXEC SoftwareArchitecture.DeleteMedicalHistory
  @MedicalHistoryId = 1;

EXEC SoftwareArchitecture.GetAllPatients
EXEC SoftwareArchitecture.GetAllPatientVisits
EXEC SoftwareArchitecture.GetAllMedicalHistory